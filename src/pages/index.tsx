import type { NextPage } from 'next'
import Link from 'next/link'
import React, { useState, useEffect, useCallback } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Highcharts from 'highcharts'
import HighchartsExporting from 'highcharts/modules/exporting'
import HighchartsReact from 'highcharts-react-official'

interface Prefectures {
  prefCode: number
  prefName: string
}

interface PrefPopulation {
  year: number
  value: number
}

const Home: NextPage = () => {
  const [prefectures, setPrefectures] = useState<Prefectures[]>([])
  const [choosePref, setChoosePref] = useState<String[]>([])
  const [prefPopulation, setPrefPopulation] = useState<PrefPopulation[]>([])

  // 都道府県名を取得
  useEffect(() => {
    fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {
      headers: { 'X-API-KEY': String(process.env.NEXT_PUBLIC_RESAS_APIKEY) },
    })
      .then((res) => res.json())
      .then((res) => {
        setPrefectures(res.result)
      })
  }, [])
  // console.log(prefectures[0].prefCode)

  // 県が追加された。choosePrefの末尾の県コードの情報を取得
  const addPrefecuture = (pref_id: string) => {
    fetch(
      `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${pref_id}`,
      {
        headers: {
          'X-API-KEY': String(process.env.NEXT_PUBLIC_RESAS_APIKEY),
        },
      }
    )
      .then((res) => res.json())
      .then((res) => {
        // setPrefPopulation(res.result.data[0].data)
        setPrefPopulation([...prefPopulation, res.result.data[0].data])
      })
  }

  // 県が削除された。削除する県コードを引数にして消す。
  const deletePrefecuture = (deleteIndex: number) => {
    const newData = prefPopulation
    newData.splice(deleteIndex, 1)
    setPrefPopulation(newData)
  }

  const changePrefectures = (pref_id: string) => {
    // チェックが外れる時
    if (choosePref.includes(pref_id)) {
      const deleteIndex = choosePref.indexOf(pref_id)
      const newArr = choosePref
      newArr.splice(deleteIndex, 1)
      console.log(newArr)

      const res = choosePref.filter(function (a) {
        return a !== pref_id
      })
      setChoosePref(newArr)
      deletePrefecuture(deleteIndex)
      return
    }
    setChoosePref([...choosePref, pref_id])
    addPrefecuture(pref_id)
  }

  // 選択した都道府県のデータを取得
  // choosePref[]が増えたとき、一番後ろのインデックス都道府県コードを取得する
  // useEffect(() => {
  //   if (choosePref[0]) {
  //     // 毎回全て取得してる チェック入れて、被ってない時のみ取得する
  //     // setPrefPopulation([])
  //     choosePref.map((v, i) => {
  //       fetch(
  //         `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${choosePref[i]}`,
  //         {
  //           headers: {
  //             'X-API-KEY': String(process.env.NEXT_PUBLIC_RESAS_APIKEY),
  //           },
  //         }
  //       )
  //         .then((res) => res.json())
  //         .then((res) => {
  //           // setPrefPopulation(res.result.data[0].data)
  //           setPrefPopulation([...prefPopulation, res.result.data[0].data])
  //         })
  //     })
  //   }
  // }, [choosePref])

  console.log(choosePref)
  // console.log(prefPopulation)

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
        <script src='https://cdn.tailwindcss.com'></script>
      </Head>

      <main>
        <ul className='flex flex-wrap gap-4'>
          {prefectures &&
            prefectures.map((v, i) => (
              <li
                className='flex items-center'
                key={i}
                // onClick={() => setChoosePref(String(v.prefCode))}
                onChange={() => changePrefectures(String(v.prefCode))}
              >
                <input type='checkbox' name='' id={v.prefName} />
                <label htmlFor={v.prefName}>
                  {v.prefCode}. {v.prefName}
                </label>
              </li>
            ))}
        </ul>

        <ul className='flex gap-4'>
          {choosePref &&
            prefPopulation &&
            prefPopulation.map((v, i) => (
              // <li key={i}>
              //   {v.year}: {v.value}
              // </li>
              <div key={i}>
                {v.map((value, index) => (
                  <li key={index}>
                    {value.year}: {value.value}
                  </li>
                ))}
              </div>
            ))}
        </ul>
      </main>
      <footer></footer>
    </div>
  )
}

export default Home
